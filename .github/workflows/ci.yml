name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: "sqlite::memory:"

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up the Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: clippy, rustfmt

      # Cache Cargo registry (dependencies) and Git repositories
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      # Cache build artifacts
      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      # Optionally, check formatting
      - name: Check code formatting
        run: cargo fmt -- --check

      # Run cargo check to verify the project compiles
      - name: Run cargo check
        run: cargo check --workspace

      # Run clippy to catch lints and warnings (treat warnings as errors)
      - name: Run cargo clippy
        run: cargo clippy --workspace -- -D warnings

      # Run tests
      - name: Run tests
        run: cargo test --workspace